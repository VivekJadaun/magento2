<?php
namespace Vinsol\MultiVendorMarketplace\Model\ResourceModel;

use Magento\UrlRewrite\Service\V1\Data\UrlRewrite as UrlRewriteService;
use Magento\Framework\Acl\Data\CacheInterface;
use Magento\User\Model\Backend\Config\ObserverConfig;

class User extends \Magento\User\Model\ResourceModel\User
{
    const REQUEST_PATH_PREFIX = 'vendors/';
    const TARGET_PATH_PREFIX = 'vendors/vendors/index/id/';
    const ENTITY_TYPE = \Vinsol\MultiVendorMarketplace\Model\Vendor::ENTITY;
    const REDIRECT_TYPE = 0;
    const STORE_ID = 1;

    protected $urlRewrite;
    protected $urlRewriteCollection;
    protected $vendorCollection;

    public function __construct(
        \Magento\Framework\Model\ResourceModel\Db\Context $context,
        \Magento\Authorization\Model\RoleFactory $roleFactory,
        \Magento\Framework\Stdlib\DateTime $dateTime,
        $connectionName = null,
        CacheInterface $aclDataCache = null,
        ObserverConfig $observerConfig = null,
        \Magento\UrlRewrite\Model\UrlRewriteFactory $urlRewriteFactory,
        \Magento\UrlRewrite\Model\ResourceModel\UrlRewriteCollectionFactory $urlRewriteCollectionFactory,
        \Vinsol\MultiVendorMarketplace\Model\ResourceModel\Vendor\CollectionFactory $vendorCollectionFactory,
        \Magento\Framework\Message\Manager $messageManager
    )
    {
        $this->urlRewrite = $urlRewriteFactory->create();        
        $this->urlRewriteCollection = $urlRewriteCollectionFactory->create();
        $this->vendorCollection = $vendorCollectionFactory->create();
        $this->messageManager = $messageManager;
        parent::__construct($context, $roleFactory, $dateTime, $connectionName, $aclDataCache, $observerConfig);     
    }

    protected function _afterSave(\Magento\Framework\Model\AbstractModel $user) {

        parent::_afterSave($user);

        if (!$user->isObjectNew()) {
            $this->updateUrlRewrite($user);
        }
        return $this;
    }

    private function updateUrlRewrite($object)
    {
        // $vendorId = $this->vendor->load($object->getUserId(), "user_id")->getId();
        $vendorId = $this->vendorCollection->addFieldToFilter('user_id', $object->getUserId())->load(true)->fetchItem()->getId();

        $urlRewrite = $this->urlRewriteCollection
            ->addFieldToFilter(UrlRewriteService::ENTITY_TYPE, self::ENTITY_TYPE)
            ->addFieldToFilter(UrlRewriteService::ENTITY_ID, $vendorId)
            ->load()->fetchItem();

        if ($urlRewrite) {
            $urlRewrite->delete();
        }

        $this->urlRewrite->setData([
            UrlRewriteService::ENTITY_ID => $vendorId,
            UrlRewriteService::ENTITY_TYPE => self::ENTITY_TYPE,
            UrlRewriteService::IS_AUTOGENERATED => 0,
            UrlRewriteService::REQUEST_PATH => self::REQUEST_PATH_PREFIX . $object->getUsername(),
            UrlRewriteService::TARGET_PATH => self::TARGET_PATH_PREFIX . $vendorId,
            UrlRewriteService::STORE_ID => self::STORE_ID,
            UrlRewriteService::REDIRECT_TYPE => self::REDIRECT_TYPE,
            UrlRewriteService::DESCRIPTION => null,
            UrlRewriteService::METADATA => null
        ]);
        try {
            $this->urlRewrite->save();
        } catch (\Exception $e) {
            $this->messageManager->addException($e);
        }

        return $this;
    }
}