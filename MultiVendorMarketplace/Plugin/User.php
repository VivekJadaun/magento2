<?php
namespace Vinsol\MultiVendorMarketplace\Plugin;

use Magento\UrlRewrite\Service\V1\Data\UrlRewrite as UrlRewriteService;
/**
 * 
 */
class User
{
    
  const REQUEST_PATH_PREFIX = 'vendors/';
  const TARGET_PATH_PREFIX = 'vendors/vendors/index/id/';
  const ENTITY_TYPE = \Vinsol\MultiVendorMarketplace\Model\Vendor::ENTITY;
  const REDIRECT_TYPE = 0;
  const STORE_ID = 1;

  protected $user;
  protected $urlRewrite;
  protected $urlRewriteCollection;
  protected $messageManager;
  protected $vendor;
  protected $vendorCollection;

  public function __construct(
      \Magento\User\Model\UserFactory $userFactory,
      \Magento\UrlRewrite\Model\UrlRewriteFactory $urlRewriteFactory,
      \Magento\UrlRewrite\Model\ResourceModel\UrlRewriteCollectionFactory $urlRewriteCollectionFactory,
      \Magento\Framework\Message\Manager $messageManager,
      \Vinsol\MultiVendorMarketplace\Model\VendorFactory $vendorFactory,
      \Vinsol\MultiVendorMarketplace\Model\ResourceModel\Vendor\CollectionFactory $vendorCollectionFactory
  )
  {
      $this->user = $userFactory->create();
      $this->urlRewrite = $urlRewriteFactory->create();
      $this->urlRewriteCollection = $urlRewriteCollectionFactory->create();
      $this->messageManager = $messageManager;
      $this->vendor = $vendorFactory->create();
      $this->vendorCollection = $vendorCollectionFactory->create();
  }
  
  public function aroundSave($subject, \Closure $proceed, \Magento\Framework\Model\AbstractModel $object)
  {
    // var_dump($object->getData());
    if (!$object->isObjectNew()) {
      $this->updateUrlRewrite($object);
    }
    return $proceed($object);
  }

  private function updateUrlRewrite($object)
  {
    // $vendorId = $this->vendor->load($object->getUserId(), "user_id")->getId();
    $vendorId = $this->vendorCollection->addFieldToFilter('user_id', $object->getUserId())->load(true)->fetchItem()->getId();

    $urlRewrite = $this->urlRewriteCollection
        ->addFieldToFilter(UrlRewriteService::ENTITY_TYPE, self::ENTITY_TYPE)
        ->addFieldToFilter(UrlRewriteService::ENTITY_ID, $vendorId)
        ->load()->fetchItem();

    if ($urlRewrite) {
      $urlRewrite->delete();
    }

    $this->urlRewrite->setData([
      UrlRewriteService::ENTITY_ID => $vendorId,
      UrlRewriteService::ENTITY_TYPE => self::ENTITY_TYPE,
      UrlRewriteService::IS_AUTOGENERATED => 0,
      UrlRewriteService::REQUEST_PATH => self::REQUEST_PATH_PREFIX . $object->getUsername(),
      UrlRewriteService::TARGET_PATH => self::TARGET_PATH_PREFIX . $vendorId,
      UrlRewriteService::STORE_ID => self::STORE_ID,
      UrlRewriteService::REDIRECT_TYPE => self::REDIRECT_TYPE,
      UrlRewriteService::DESCRIPTION => null,
      UrlRewriteService::METADATA => null
    ]);
    try {
      $this->urlRewrite->save();
    } catch (\Exception $e) {
      $this->messageManager->addException($e);
    }

    
    return $this;
  }
}   