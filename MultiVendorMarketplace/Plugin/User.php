<?php
namespace Vinsol\MultiVendorMarketplace\Plugin;

use Magento\UrlRewrite\Service\V1\Data\UrlRewrite as UrlRewriteService;
/**
 * 
 */
class User
{
    
    const REQUEST_PATH_PREFIX = 'vendors/';
    const TARGET_PATH_PREFIX = 'vendors/vendors/index/id/';
    const ENTITY_TYPE = \Vinsol\MultiVendorMarketplace\Model\Vendor::ENTITY;
    const REDIRECT_TYPE = 0;
    const STORE_ID = 1;

    public function __construct(
        \Magento\User\Model\UserFactory $userFactory,
        \Magento\UrlRewrite\Model\UrlRewriteFactory $urlRewriteFactory,
        \Magento\UrlRewrite\Model\ResourceModel\UrlRewriteCollectionFactory $urlRewriteCollectionFactory,
        \Magento\Framework\Message\Manager $messageManager
    )
    {
        $this->user = $userFactory->create();
        $this->urlRewrite = $urlRewriteFactory->create();
        $this->urlRewriteCollection = $urlRewriteCollectionFactory->create();
        $this->messageManager = $messageManager;
    }
    
    public function beforeSave($subject, \Magento\Framework\Model\AbstractModel $object)
    {

        if ($object->isObjectNew()) {
            $this->updateUrlRewrite($object);
        } else {
            $this->user->load($object->getId());

            if ($object->getUsername() != $this->user->getUsername()) {
                $urlRewrite = $this->urlRewriteCollection
                  ->addFieldToFilter(UrlRewriteService::ENTITY_TYPE, self::ENTITY_TYPE)
                  ->addFieldToFilter(UrlRewriteService::ENTITY_ID, $vendorId)
                  ->load()->fetchItem();

                $urlRewrite->delete();
                $this->updateUrlRewrite($object);
            }
        }
    }

    // public function aroundSave($subject, \Closure $proceed, \Magento\Framework\Model\AbstractModel $object)
    // {
    //   if ($object->isObjectNew()) {
    //      # code...
    //    } 
    // }

    private function updateUrlRewrite($object)
    {
      $vendorId = $object->getEntityId();
  
      // if ($this->user->isObjectNew()) {
        $this->urlRewrite->setData([
          UrlRewriteService::ENTITY_ID => $vendorId,
          UrlRewriteService::ENTITY_TYPE => self::ENTITY_TYPE,
          UrlRewriteService::IS_AUTOGENERATED => 0,
          UrlRewriteService::REQUEST_PATH => self::REQUEST_PATH_PREFIX . $object->getUsername(),
          UrlRewriteService::TARGET_PATH => self::TARGET_PATH_PREFIX . $vendorId,
          UrlRewriteService::STORE_ID => self::STORE_ID,
          UrlRewriteService::REDIRECT_TYPE => self::REDIRECT_TYPE,
          UrlRewriteService::DESCRIPTION => null,
          UrlRewriteService::METADATA => null
        ]);
        
        $this->urlRewrite->save();
      // }

      // else if ($this->_usernameChanged) {
      //   $urlRewrite = $this->urlRewriteCollection
      //     ->addFieldToFilter(UrlRewriteService::ENTITY_TYPE, self::ENTITY_TYPE)
      //     ->addFieldToFilter(UrlRewriteService::ENTITY_ID, $vendorId)
      //     ->load()->fetchItem();

      //   $urlRewrite->delete();
      // }

      
      return $this;
    }
}   